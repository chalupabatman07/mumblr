# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Conversation {
  id: ID!
}

input CreateProfileInput {
  aboutMe: String
  age: Int!
  company: String
  gender: Gender!
  jobTitle: String
  livingIn: String
  school: String
  sexualOrientation: SexualOrientation!
}

type Discovery {
  agePreferenceEnd: Int
  agePreferenceStart: Int
  distance: Int
  id: ID!
  location: String
  showGlobal: Boolean
  showMe: Boolean
  showOnlyInAgeRange: Boolean
  showPreference: ShowPreference
}

"""Does the user drink"""
enum Drinking {
  DRINKER
  NONDRINKER
  SOCIAL_DRINKER
}

"""Users genders"""
enum Gender {
  GENDERFLUID
  GENDERQUEER
  MALE
  NONBINARY
  TRANSGENDER
  TRANSMEN
  TRANSSEXUAL
  TRANSWOMEN
  WOMEN
}

type Lifestyle {
  drinking: Drinking
  id: ID!
  marijuana: Smoking
  pets: Pets
  smoking: Smoking
  zodiac: Zodiac
}

type Match {
  conversation: Conversation!
  id: ID!
  matchId: String!
  userId: String!
}

type Mutation {
  createMatch(matchId: String!): Match!
  createProfile(input: CreateProfileInput!): Profile!
  updateDiscovery(input: UpdateDiscoveryInput!): Discovery!
  updateLifestyle(input: UpdateLifestyleInput!): Lifestyle!
  updateProfile(input: UpdateProfileInput!): Profile!
}

"""Pets that users can have"""
enum Pets {
  ALL_PETS
  BIRD
  CAT
  DOG
  FISH
  PET_FREE
  REPTILE
}

type Profile {
  aboutMe: String
  age: Int!
  company: String
  discovery: Discovery!
  gender: Gender!
  id: ID!
  jobTitle: String
  lifestyle: Lifestyle!
  livingIn: String
  school: String
  sexualOrientation: SexualOrientation!
  userId: ID!
}

type Query {
  getDiscoveries: [Discovery!]!
  getLifestyles: [Lifestyle!]!
  getMatches: [Match!]!
  getProfile: [Profile!]!
  me: User!
  myProfile: Profile!
}

"""How the user swings"""
enum SexualOrientation {
  ASEXUAL
  BISEXUAL
  DEMISEXUAL
  GAY
  LESBIAN
  PANSEXUAL
  QUEER
  QUESTIONING
  STRAIGHT
}

"""Who to show to the user"""
enum ShowPreference {
  EVERYONE
  MEN
  WOMEN
}

"""Does the user smoke?"""
enum Smoking {
  NONSMOKER
  SMOKER
  SMOKER_WHILE_DRINKING
  SOCIAL_SMOKER
}

input UpdateDiscoveryInput {
  agePreferenceEnd: Int!
  agePreferenceStart: Int!
  discoveryId: String!
  distance: Int!
  location: String!
  showGlobal: Boolean!
  showMe: Boolean!
  showOnlyInAgeRange: Boolean!
  showPreference: ShowPreference!
}

input UpdateLifestyleInput {
  drinking: Drinking
  lifestyleId: String!
  marijuana: Smoking
  pets: Pets
  smoking: Smoking
  zodiac: Zodiac
}

input UpdateProfileInput {
  aboutMe: String
  company: String
  gender: Gender
  jobTitle: String
  livingIn: String
  profileId: String!
  school: String
  sexualOrientation: SexualOrientation
}

"""User auth information"""
type User {
  email: String!
  id: ID!
  phoneNumber: String!
}

"""The zodiac belt signs"""
enum Zodiac {
  AQUARIUS
  ARIES
  CANCER
  CAPRICORN
  GEMINI
  LEO
  LIBRA
  PISCES
  SAGITTARIUS
  SCORPIO
  TAURUS
  VIRGO
}
